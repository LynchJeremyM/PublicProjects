# Group 12 - Project 2
# Jeremy Lynch
# Meg
# Divin

# Function that parses a file with the given name, returning the appropriate matrix(s) 
def parse_file(filename):
	
	data = ""
	matrix = []
	num_p, num_r = 0, 0
	units_r = 0

	
	file = open(filename, "r")
	data = file.readline()
	while(data):	
		# Skip lines starting with %
		data = data.strip()
		if(data and data[0] != '%'):
	
			# Get # of processes and resources
			if 'num_processes=' in data:
				num_p = data[14:]
			elif  'num_resources=' in data:
				num_r = data[14:]
			# Get number of units of each resource
			elif units_r == 0:
				tmp = [int(x) for x in data.split(',')]
				units_r = tmp
			# Get adjacency matrix
			else:
				tmp = [int(x) for x in data.split(',')]
				matrix.append(tmp)
				
				
		# Loop through data until EOF
		data = file.readline()
		
	print("Number of processes: " , num_p)
	print("Number of resources: ", num_r)	
	print("Resource Units: ", units_r)
	print(matrix)
	
	
	return matrix, units_r

# Reduce the give matrix/graph if possible, returning the new matrix and the status of the operation	
def reduce_graph(matrix):

	reduceable = True
	
	# Return the matrix after reduction, along with T/F for success of operation
	return matrix, reduceable
	
	
def main():
	
	# Get file to parse from user
	filename = input("Enter the filename to be parsed: ")
	
	# Get adjacency matrix from file, along with resource counts
	mat, units_r = parse_file(filename)
	
	




if __name__ == "__main__":
	main()
		
